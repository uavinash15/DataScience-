# -*- coding: utf-8 -*-
"""Descriptive Analytics_IPL_CHAPTE2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D-Epwq1ARCZTg45VjRs1FP3Bp4SzUIZU
"""

import pandas as pd

pd.read_csv?

ipl_auction_df=pd.read_csv('IPL IMB381IPL2013.csv')

type(ipl_auction_df)

ipl_auction_df.head()

pd.set_option('display.max_columns',7)

ipl_auction_df.head(5)

list(ipl_auction_df.columns)

ipl_auction_df.head(5).transpose()

ipl_auction_df.shape

ipl_auction_df.info()

ipl_auction_df[0:5]

ipl_auction_df[-5:]

ipl_auction_df['PLAYER NAME'][0:5]

ipl_auction_df[['PLAYER NAME','COUNTRY']][0:5]

ipl_auction_df.iloc[4:9,1:4]

ipl_auction_df.COUNTRY.value_counts()

ipl_auction_df.COUNTRY.value_counts(normalize=True)*100

pd.crosstab(ipl_auction_df['AGE'],ipl_auction_df['PLAYING ROLE'])

ipl_auction_df[['PLAYER NAME','SOLD PRICE']].sort_values('SOLD PRICE')[0:5]

ipl_auction_df[['PLAYER NAME','SOLD PRICE']].sort_values('SOLD PRICE',ascending=False)[0:5]

ipl_auction_df['premium'] = ipl_auction_df['SOLD PRICE'] - ipl_auction_df['BASE PRICE']

ipl_auction_df[['PLAYER NAME','BASE PRICE','SOLD PRICE','premium']][0:5]

ipl_auction_df[['PLAYER NAME','BASE PRICE','SOLD PRICE','premium']].sort_values('premium')[0:5]

ipl_auction_df[['PLAYER NAME','BASE PRICE','SOLD PRICE','premium']].sort_values('premium',ascending=False)[0:5]

"""# **Grouping and Aggregating**"""

ipl_auction_df.groupby('AGE')['SOLD PRICE'].mean()

soldprice_by_age=ipl_auction_df.groupby('AGE')['SOLD PRICE'].mean().reset_index()
print(soldprice_by_age)

sold_price_by_playing_role=ipl_auction_df.groupby('PLAYING ROLE')['SOLD PRICE'].mean().reset_index()
print(sold_price_by_playing_role)

sold_price_by_age_role=ipl_auction_df.groupby(['AGE','PLAYING ROLE'])['SOLD PRICE'].mean().reset_index()
print(sold_price_by_age_role)

"""# **Joining DataFrames**"""

print('soldprice_by_age: ')
print(soldprice_by_age)
print('-----------------------------------------------------------------------')
print('sold_price_by_age_role')
print(sold_price_by_age_role)
print('-----------------------------------------------------------------------')
soldprice_comparison=sold_price_by_age_role.merge(soldprice_by_age,on='AGE',how='outer')
print(soldprice_comparison)

"""# **Re-Naming Columns**"""

soldprice_comparison.rename(columns={'SOLD PRICE_x':'SOLD_PRICE_AGE_ROLE','SOLD PRICE_y':'SOLD_PRICE_AGE'},inplace=True)

print(soldprice_comparison)

"""# **Applying Operations to Multiple Columns**"""

soldprice_comparison["change"]=soldprice_comparison.apply(lambda rec:(rec.SOLD_PRICE_AGE_ROLE-rec.SOLD_PRICE_AGE)/rec.SOLD_PRICE_AGE,axis=1)

soldprice_comparison

"""**Filtering Records Based on Conditions**"""

ipl_auction_df[ipl_auction_df['SIXERS']>80][['PLAYER NAME','SIXERS']]

"""**Removing a Column or a Row from a Dataset**"""

ipl_auction_df.drop('Sl.NO.',inplace=True,axis=1)

ipl_auction_df.columns

"""# **EXPLORATION OF DATA USING VISUALIZATION**

# **Drawing Plots**
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sn
# %matplotlib inline

"""# **Bar Chart**"""

sn.barplot(x='AGE',y='SOLD PRICE',data=soldprice_by_age);

sn.barplot(x='AGE',y='SOLD_PRICE_AGE_ROLE',hue='PLAYING ROLE',data=soldprice_comparison)

"""# **Histogram**"""

plt.hist(ipl_auction_df['SOLD PRICE'])
plt.show()

plt.hist(ipl_auction_df['SOLD PRICE'],bins=20)
plt.show()

"""# **Distribution or Density Plot**"""

import warnings
warnings.filterwarnings('ignore')
sn.distplot(ipl_auction_df['SOLD PRICE'])
plt.show()

"""# **Box Plot**"""

box=sn.boxplot(ipl_auction_df['SOLD PRICE'])
box

import warnings
warnings.filterwarnings('ignore')
sn.distplot(ipl_auction_df[ipl_auction_df['CAPTAINCY EXP']==1]['SOLD PRICE'],
            color='y',
            label='Captaincy Experience')
sn.distplot(ipl_auction_df[ipl_auction_df['CAPTAINCY EXP']==0]['SOLD PRICE'],
            color='r',
            label='No Captaincy Experience')
plt.legend()
plt.show()

sn.boxplot(x='PLAYING ROLE',y='SOLD PRICE',data=ipl_auction_df)
plt.show()

"""## **Scatter Plot**"""

ipl_batsman_df=ipl_auction_df[ipl_auction_df['PLAYING ROLE']=='Batsman']

plt.scatter(x=ipl_batsman_df.SIXERS,
            y=ipl_batsman_df['SOLD PRICE'])
plt.show()

sn.regplot(x='SIXERS',y='SOLD PRICE',data=ipl_batsman_df)
plt.show()

"""# **Pair Plot**"""

#pairplot()

influential_features=['SR-B','AVE','SIXERS','SOLD PRICE']

sn.pairplot(ipl_auction_df[influential_features],size=2)
plt.show()



"""# **Correlation and Heatmap**"""

#corr()

ipl_auction_df[influential_features].corr()

sn.heatmap(ipl_auction_df[influential_features].corr(),annot=True)
plt.show()

